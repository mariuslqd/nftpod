import { AxiosRequestConfig } from 'axios';
import { GetAccountBalanceReply, GetAccountBalanceRequest, GetBlocksReply, GetBlocksRequest, GetCurrenciesReply, GetCurrenciesRequest, GetLogsReply, GetLogsRequest, GetNFTHoldersReply, GetNFTHoldersRequest, GetNFTMetadataReply, GetNFTMetadataRequest, GetNFTsByOwnerReply, GetNFTsByOwnerRequest, GetTokenHoldersCountReply, GetTokenHoldersCountRequest, GetTokenHoldersReply, GetTokenHoldersRequest, GetTokenPriceReply, GetTokenPriceRequest, GetTransactionsByAddressReply, GetTransactionsByAddressRequest, GetTransactionsByHashReply, GetTransactionsByHashRequest, GetTokenPriceHistoryRequest, GetTokenPriceHistoryReply } from "./types";
export default class AnkrProvider {
    url: string;
    requestConfig: AxiosRequestConfig;
    _nextId: number;
    /**
     * Constructs an instance of AnkrProvider.
     * @param apiKey The API key for authorization.
     * @param endpoint Ankr Scan MultiChain RPC endpoint.
     */
    constructor(apiKey?: string, endpoint?: string);
    /**
     * Returns the array of Log matching the filter.
     * @param params A GetLogsRequest object.
     * @returns Promise<GetLogsReply>
     */
    getLogs(params: GetLogsRequest): Promise<GetLogsReply>;
    /**
     * Returns the array of Block within specified range.
     * @param params A GetBlocksRequest object.
     * @returns Promise<GetBlocksReply>
     */
    getBlocks(params: GetBlocksRequest): Promise<GetBlocksReply>;
    /**
     * Returns the Transaction(s) with specified hash among all supported blockchains.
     * @param params A GetTransactionsByHashRequest object.
     * @returns Promise<GetTransactionsByHashReply>
     */
    getTransactionsByHash(params: GetTransactionsByHashRequest): Promise<GetTransactionsByHashReply>;
    /**
     * Returns Transactions of specified address.
     * @param params A GetTransactionsByAddressRequest object.
     * @returns Promise<GetTransactionsByAddressReply>
     */
    getTransactionsByAddress(params: GetTransactionsByAddressRequest): Promise<GetTransactionsByAddressReply>;
    /**
     * Returns coin and token balances of the wallet.
     * @param params A GetAccountBalanceRequest object.
     * @returns Promise<Balance[]>
     */
    getAccountBalance(params: GetAccountBalanceRequest): Promise<GetAccountBalanceReply>;
    /**
     * Returns NFT collectibles of the wallet.
     * @param params A GetNFTsByOwnerRequest object.
     * @returns Promise<GetNFTsByOwnerReply>
     */
    getNFTsByOwner(params: GetNFTsByOwnerRequest): Promise<GetNFTsByOwnerReply>;
    /**
     * Returns NFT's contract metadata.
     * @param params A GetNFTMetadataRequest object.
     * @returns Promise<GetNFTMetadataRequest>
     */
    getNFTMetadata(params: GetNFTMetadataRequest): Promise<GetNFTMetadataReply>;
    /**
     * Returns NFT's holders.
     * @param params A GetNFTHoldersRequest object.
     * @returns Promise<GetNFTHoldersRequest>
     */
    getNFTHolders(params: GetNFTHoldersRequest): Promise<GetNFTHoldersReply>;
    /**
     * Returns list of token holders.
     * @param params A GetTokenHoldersRequest object.
     * @returns Promise<GetTokenHoldersReply>
     */
    getTokenHolders(params: GetTokenHoldersRequest): Promise<GetTokenHoldersReply>;
    /**
     * Returns list of historical token holders count by day.
     * @param params A GetTokenHoldersCountRequest object.
     * @returns Promise<GetTokenHoldersCountReply>
     */
    getTokenHoldersCount(params: GetTokenHoldersCountRequest): Promise<GetTokenHoldersCountReply>;
    /**
     * Returns token USD price.
     * @param params A GetTokenPriceRequest object.
     * @returns Promise<GetTokenPriceReply>
     */
    getTokenPrice(params: GetTokenPriceRequest): Promise<GetTokenPriceReply>;
    /**
     * Returns list of currencies.
     * @param params A GetCurrenciesRequest object.
     * @returns Promise<GetCurrenciesReply>
     */
    getCurrencies(params: GetCurrenciesRequest): Promise<GetCurrenciesReply>;
    /**
     * Shows price history for provided token on specific chain
     * @param params A GetTokenPriceHistoryRequest object.
     * @returns Promise<GetTokenPriceHistoryReply>
     */
    getTokenPriceHistory(params: GetTokenPriceHistoryRequest): Promise<GetTokenPriceHistoryReply>;
    private send;
    private static getResult;
}
