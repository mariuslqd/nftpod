"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const cross_spawn_1 = __importDefault(require("cross-spawn"));
const detect_port_1 = __importDefault(require("detect-port"));
const fs = __importStar(require("fs"));
const http = __importStar(require("http"));
const open_1 = __importDefault(require("open"));
const create_next_app_1 = require("./create-next-app");
const MakeswiftError_1 = __importDefault(require("./errors/MakeswiftError"));
const integrate_next_app_1 = require("./integrate-next-app");
const check_for_conflicting_files_1 = require("./utils/check-for-conflicting-files");
const get_name_1 = require("./utils/get-name");
const is_next_app_1 = __importDefault(require("./utils/is-next-app"));
const MAKESWIFT_APP_ORIGIN = process.env.MAKESWIFT_APP_ORIGIN || 'https://app.makeswift.com';
const MAKESWIFT_API_ORIGIN = process.env.MAKESWIFT_API_ORIGIN;
const siteSelectionPath = 'select-site';
async function wrappedInit(name, args) {
    try {
        await init(name, args);
    }
    catch (err) {
        if (err instanceof MakeswiftError_1.default) {
            console.log(err.message);
            process.exit(0);
        }
        else {
            throw err;
        }
    }
}
exports.default = wrappedInit;
async function init(name, { example: passedInExample, template, useNpm, usePnpm, env = [] }) {
    function validate() {
        if (useNpm && usePnpm) {
            throw new MakeswiftError_1.default('Cannot use both --use-npm and --use-pnpm args. Choose 1 package manager.');
        }
    }
    async function performHandshake({ usingExistingNextApp, }) {
        const handshakePort = await (0, detect_port_1.default)(5600);
        const nextAppPort = await (0, detect_port_1.default)(3000);
        const callbackUrl = `http://localhost:${handshakePort}/${siteSelectionPath}`;
        // Handshake Step 1
        const selectSiteUrl = new URL(`${MAKESWIFT_APP_ORIGIN}/cli/select-site`);
        selectSiteUrl.searchParams.set('project_name', projectName);
        selectSiteUrl.searchParams.set('callback_url', callbackUrl);
        selectSiteUrl.searchParams.set('using_existing_next_app', String(usingExistingNextApp));
        passedInExample && selectSiteUrl.searchParams.set('example', passedInExample);
        template && selectSiteUrl.searchParams.set('template', template);
        if (env.length > 0) {
            selectSiteUrl.searchParams.set('env_vars', env.join(','));
        }
        const selectSiteUrlString = selectSiteUrl.toString();
        console.log(`\nOpening your browser at ${chalk_1.default.blue(selectSiteUrlString)}\n\nIf anything happens, re-open that URL.`);
        await (0, open_1.default)(selectSiteUrlString);
        // Handshake Step 2 - the browser goes to `callbackUrl`
        const nextAppUrl = `http://localhost:${nextAppPort}`;
        const redirectUrl = new URL(`${MAKESWIFT_APP_ORIGIN}/cli/link-site`);
        redirectUrl.searchParams.set('host_url', nextAppUrl);
        // Handshake Step 3 - we redirect the browser to redirectUrl
        const { siteApiKey, example, envVars } = await getSiteMetadata({
            port: handshakePort,
            redirectUrl: redirectUrl.toString(),
        });
        // In the background, we're setting up the Next app with the API key
        // and starting the app at `nextAppPort`
        // @todo: once we can define env vars in the browser, remove ...env.
        //        This is because we want the browser choices to override the
        //        ones passed in via the CLI.
        const envLocal = buildLocalEnvFile({
            MAKESWIFT_SITE_API_KEY: siteApiKey,
            MAKESWIFT_API_ORIGIN,
        }, envVars);
        // Handshake Step 4 - Makeswift redirects to the builder with the site open,
        //                    with the host using `nextAppUrl` for the builder
        return { nextAppPort, envLocal, example: example || passedInExample || null };
    }
    validate();
    const { directory: nextAppDir, name: projectName } = await (0, get_name_1.getProjectName)(name);
    const usingExistingNextApp = (0, is_next_app_1.default)(nextAppDir);
    (0, check_for_conflicting_files_1.checkForConflictingFiles)({ dir: nextAppDir });
    const { nextAppPort, envLocal, example } = await performHandshake({ usingExistingNextApp });
    if (usingExistingNextApp) {
        await (0, integrate_next_app_1.integrateNextApp)({ dir: nextAppDir });
    }
    else {
        (0, create_next_app_1.createNextApp)({
            dir: nextAppDir,
            example: example || 'basic-typescript',
            useNpm,
            usePnpm,
        });
    }
    fs.writeFileSync(`${nextAppDir}/.env.local`, envLocal);
    cross_spawn_1.default.sync('yarn', ['dev', '--port', nextAppPort.toString()], {
        stdio: 'inherit',
        cwd: nextAppDir,
    });
}
async function getSiteMetadata({ port, redirectUrl, }) {
    return new Promise((resolve, reject) => {
        const sockets = [];
        const server = http
            .createServer((req, res) => {
            const url = new URL(req.url, `http://${req.headers.host}`);
            if (url.pathname !== `/${siteSelectionPath}`) {
                res.writeHead(400);
                res.end();
                return;
            }
            const queryParams = url.searchParams;
            const siteApiKey = queryParams.get('site_api_key');
            if (!siteApiKey) {
                res.writeHead(400);
                res.end();
                return;
            }
            const example = queryParams.get('example');
            const commaSeparatedEnvVars = queryParams.get('env_vars');
            let envVars = [];
            if (commaSeparatedEnvVars != null && commaSeparatedEnvVars.length != 0) {
                const pairs = commaSeparatedEnvVars.split(',');
                envVars = pairs;
            }
            // add the api key in the redirect URL
            const destinationURL = new URL(redirectUrl);
            destinationURL.searchParams.set('api_key', siteApiKey);
            res.writeHead(302, {
                Location: destinationURL.toString(),
            });
            res.end(() => {
                server.close(err => {
                    if (err != null) {
                        reject(err);
                    }
                    resolve({
                        siteApiKey,
                        example,
                        envVars,
                    });
                });
                // Google Chrome very aggressively holds on to the socket
                for (const socket of sockets) {
                    if (!socket.destroyed) {
                        socket.destroy();
                    }
                }
            });
        })
            .listen(port);
        server.on('connection', function (socket) {
            sockets.push(socket);
        });
    });
}
function buildLocalEnvFile(variables, predefinedValues) {
    const envFile = Object.entries(variables)
        .filter(([key, value]) => value != null)
        .reduce((envFile, [key, value]) => {
        return envFile + `${key}=${value}\n`;
    }, '');
    if (predefinedValues != null) {
        return envFile + predefinedValues.join('\n');
    }
    return envFile;
}
