"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkForConflictingFiles = void 0;
const chalk_1 = __importDefault(require("chalk"));
const glob = __importStar(require("glob"));
const MakeswiftError_1 = __importDefault(require("../errors/MakeswiftError"));
const CONFLICTING_FILES = [
    'pages/api/makeswift.*',
    'pages/api/makeswift/**/*',
    'pages/[*].*',
    'pages/_document.*',
];
function containsConflictingFiles({ dir }) {
    return CONFLICTING_FILES.map(file => ({ path: `${dir}/${file}`, name: file }))
        .map(({ path }) => glob.sync(path))
        .reduce((prev, curr) => prev.concat(...curr), []);
}
function checkForConflictingFiles({ dir }) {
    const conflictingFiles = containsConflictingFiles({ dir });
    if (conflictingFiles.length > 0) {
        throw new MakeswiftError_1.default(formatErrorMessage({ dir, files: conflictingFiles }));
    }
}
exports.checkForConflictingFiles = checkForConflictingFiles;
function formatErrorMessage({ dir, files }) {
    const relativeFiles = files.map(file => file.split(`${dir}/`)[1]);
    const uniqueFilesOrFolders = Array.from(new Set(relativeFiles));
    const directoryName = dir.split('/').slice(-1)[0];
    const prettyFiles = uniqueFilesOrFolders
        .map(fileOrFolder => `  ${chalk_1.default.dim(fileOrFolder)}`)
        .join('\n');
    return `The directory ${chalk_1.default.green(directoryName)} contains files that could conflict:\n\n${prettyFiles}\n\nYou will need to use a different directory or integrate manually. Read our docs for more info: ${chalk_1.default.blue('https://www.makeswift.com/docs/guides/manual-setup')}`;
}
