"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProjectName = void 0;
const chalk_1 = __importDefault(require("chalk"));
const inquirer_1 = __importDefault(require("inquirer"));
const path_1 = __importDefault(require("path"));
const MakeswiftError_1 = __importDefault(require("../errors/MakeswiftError"));
const is_next_app_1 = __importDefault(require("./is-next-app"));
async function validateProjectName(input) {
    // taken from https://github.com/dword-design/package-name-regex/blob/master/src/index.js
    const packageNameRegex = /^(@[a-z0-9-~][a-z0-9-._~]*\/)?[a-z0-9-~][a-z0-9-._~]*$/;
    if (!packageNameRegex.test(input)) {
        return 'Project name must be a valid NPM package name.';
    }
    if (/\.+($|\/)/.test(input)) {
        return 'Relative pathnames not allowed.';
    }
    return true;
}
async function askForProjectName() {
    return new Promise(resolve => {
        const questions = [
            {
                type: 'input',
                name: 'projectName',
                message: 'What would you like to name your project?',
                validate: validateProjectName,
                default: 'my-app',
            },
        ];
        inquirer_1.default.prompt(questions).then(answers => {
            resolve(answers.projectName);
        });
    });
}
async function askToUseCurrentDirectory(dir) {
    return new Promise(resolve => {
        const questions = [
            {
                type: 'confirm',
                name: 'approval',
                default: true,
                message: `It appears this directory is an existing ${chalk_1.default.green('Next.js')} app — would you like to use it?`,
            },
        ];
        inquirer_1.default.prompt(questions).then(answers => {
            if (typeof answers.approval == 'boolean') {
                resolve(answers.approval);
            }
            else {
                throw new MakeswiftError_1.default('Something went wrong');
            }
        });
    });
}
async function askApprovalToIntegrateIfNeeded(dir) {
    const projectName = dir.split('/').slice(-1)[0];
    async function askApproval() {
        return new Promise(resolve => {
            const questions = [
                {
                    type: 'confirm',
                    name: 'approval',
                    default: true,
                    message: `It appears ${chalk_1.default.cyan(projectName)} is an existing Next.js app — would you like to integrate it?`,
                },
            ];
            inquirer_1.default.prompt(questions).then(answers => {
                resolve(answers.approval);
            });
        });
    }
    if ((0, is_next_app_1.default)(dir)) {
        const approval = await askApproval();
        if (!approval) {
            process.exit(0);
        }
    }
}
async function getProjectName(name) {
    const currentDir = process.cwd();
    // 1. If the user passed a name, use that
    if (name != null) {
        const dir = path_1.default.join(currentDir, name);
        await askApprovalToIntegrateIfNeeded(dir);
        return { name, directory: dir };
    }
    // 2. If the current directory is a Next.js app, ask the user if they want to use that
    const isCurrentDirNextApp = (0, is_next_app_1.default)(currentDir);
    if (isCurrentDirNextApp) {
        const useCurrentApp = await askToUseCurrentDirectory(currentDir);
        if (useCurrentApp) {
            return { directory: currentDir, name: currentDir.split('/').at(-1) };
        }
    }
    // 3. Prompt the user for the project name
    const projectName = await askForProjectName();
    const nextAppDir = path_1.default.join(process.cwd(), projectName);
    await askApprovalToIntegrateIfNeeded(nextAppDir);
    return { name: projectName, directory: nextAppDir };
}
exports.getProjectName = getProjectName;
