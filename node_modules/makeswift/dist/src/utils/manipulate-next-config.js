"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isAlreadyIntegrated = exports.manipulateNextConfig = void 0;
const babel = __importStar(require("@babel/core"));
const t = __importStar(require("@babel/types"));
const template_1 = __importDefault(require("@babel/template"));
const MakeswiftError_1 = __importDefault(require("../errors/MakeswiftError"));
function manipulateNextConfig(code) {
    function makeswiftNextConfigPlugin() {
        return {
            visitor: {
                Program(path) {
                    const buildRequire = (0, template_1.default)(`const IMPORT_NAME = require(SOURCE)()`);
                    path.unshiftContainer('body', buildRequire({
                        IMPORT_NAME: t.identifier('withMakeswift'),
                        SOURCE: t.stringLiteral('@makeswift/runtime/next/plugin'),
                    }));
                },
                AssignmentExpression(path) {
                    const { node: leftNode } = path.get('left');
                    if (t.isMemberExpression(leftNode)) {
                        if (t.isIdentifier(leftNode.object) && t.isIdentifier(leftNode.property)) {
                            if (leftNode.object.name === 'module' && leftNode.property.name === 'exports') {
                                const moduleExportsValuePath = path.get('right');
                                const moduleExportsValueNode = path.node.right;
                                // Identifier
                                if (t.isIdentifier(moduleExportsValueNode)) {
                                    moduleExportsValuePath.replaceWith(t.identifier(`withMakeswift(${moduleExportsValueNode.name})`));
                                }
                                // Object Expression
                                if (t.isObjectExpression(moduleExportsValueNode)) {
                                    const newNode = (0, template_1.default)(`withMakeswift(OBJECT)`)({
                                        OBJECT: t.objectExpression(moduleExportsValueNode.properties),
                                    });
                                    moduleExportsValuePath.replaceWith(newNode);
                                }
                                // Call Expression
                                if (t.isCallExpression(moduleExportsValueNode)) {
                                    const newNode = (0, template_1.default)(`withMakeswift(CALL)`)({
                                        CALL: t.callExpression(moduleExportsValueNode.callee, moduleExportsValueNode.arguments),
                                    });
                                    moduleExportsValuePath.replaceWith(newNode);
                                }
                            }
                        }
                    }
                },
            },
        };
    }
    const output = babel.transformSync(code, {
        plugins: [makeswiftNextConfigPlugin],
        generatorOpts: {},
    });
    const changedCode = output.code;
    // @todo: make this more robust in the future
    if (changedCode == null || !changedCode.includes('withMakeswift(')) {
        throw new MakeswiftError_1.default('Cannot automatically edit your next.config.js.\n\nSee this link on how to do so: https://www.makeswift.com/docs/guides/manual-setup#adding-the-makeswift-nextjs-plugin');
    }
    return changedCode;
}
exports.manipulateNextConfig = manipulateNextConfig;
function isAlreadyIntegrated(code) {
    return code.includes('withMakeswift');
}
exports.isAlreadyIntegrated = isAlreadyIntegrated;
